name: 触发N1启动编译
on:
  workflow_dispatch:
    inputs:
      ssh:
        description: '[ssh-actions]改成[ssh],再按[Run workflow]按钮启动,则开启SSH连接配置固件'
        required: false
        default: 'ssh-actions'
      days:
        description: '清理[X]天之前的Actions空间操作记录(可改)'
        required: false
        default: '37'
      rele:
        description: '保留[X]个Releases不被删除(可改)'
        required: false
        default: '30'


# 定时触发开启开始编译(把下面两个#去掉开启,时间设置请看定时开启编译说明)
  schedule:
   - cron: 0 3 */4 * *


env:
  BILDYML: N1.yml
  
  # 多开N1.yml时把上面N1.yml同步改成你新建立的文件名称
  # 比如你新建立的文件叫x86-openwrt.yml，你就把BILDYML: N1.yml改成BILDYML: x86-openwrt.yml
  # 多开N1.yml时，要把最上面的‘触发compile启动编译’也随便改一下，不重覆就可以了

  Github: https://github.com/${{github.repository}}
  Author: ${{github.actor}}
  Warehouse: ${{github.repository}}
  Run_number: ${{github.run_number}}
  Run_workflow: ${{github.workflow}}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: 启动${{matrix.target}}编译
    strategy:
      fail-fast: false
      matrix:
        target: [openwrt_amlogic]

        # [Lede_source,Lienol_source,Mortal_source,Tianling_source,openwrt_amlogic]

    
    steps:
    - name: 准备结束
      uses: actions/checkout@v2

    - name: 读取脚本设置
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_PART_SH=${DIY_PART_SH}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${UPLOAD_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV
        echo "REGULAR_UPDATE=${REGULAR_UPDATE}" >> $GITHUB_ENV
        echo "USE_CACHEWRTBUILD=${USE_CACHEWRTBUILD}" >> $GITHUB_ENV
        echo "BY_INFORMATION=${BY_INFORMATION}" >> $GITHUB_ENV
        echo "Library=${Warehouse##*/}" >> $GITHUB_ENV
        echo "matrixtarget=${{matrix.target}}" >> $GITHUB_ENV
        
    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq full-upgrade -y
        sudo -E apt-get -qq install -y subversion build-essential libncurses5-dev openssl libssl-dev zlib1g-dev gawk git ccache gettext libssl-dev xsltproc zip git-core wget curl grep > /dev/null 2>&1
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /${{matrix.target}}
        sudo chown $USER:$GROUPS /${{matrix.target}}
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
    
    - name: 下载"${{matrix.target}}"源码
      working-directory: /${{matrix.target}}
      run: |
        git clone --depth 1 -b main https://github.com/czkds/common ${GITHUB_WORKSPACE}/build/common
        mv -f ${GITHUB_WORKSPACE}/build/common/*.sh ${GITHUB_WORKSPACE}/build/${{matrix.target}}/
        chmod -R +x ${GITHUB_WORKSPACE}/build
        git clone -b "$REPO_BRANCH" --single-branch "$REPO_URL" openwrt
        ln -sf /${{matrix.target}}/openwrt $GITHUB_WORKSPACE/openwrt
 
    - name: 公 告
      run: |
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        source $GITHUB_WORKSPACE/build/${{matrix.target}}/common.sh && Diy_variable
        source $GITHUB_WORKSPACE/build/${{matrix.target}}/common.sh && Diy_Notice
 
    - name: 加载源,补丁和自定义设置
      run: |
        cd openwrt
        source $BUILD_PATH/common.sh && Diy_menu
        
    - name: SSH远程连接（制作.config配置文件）
      if: env.SSH_ACTIONS == 'true' || (github.event.inputs.ssh == 'ssh')
      uses: czkds/debugger-action@master
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 生成"${{matrix.target}}"配置文件
      id: compileop
      run: |
        cd openwrt
        source $BUILD_PATH/common.sh && Diy_menu2
        ./scripts/diffconfig.sh > ${GITHUB_WORKSPACE}/${CONFIG_FILE}
        cp -Rf ${GITHUB_WORKSPACE}/${CONFIG_FILE} ${GITHUB_WORKSPACE}/config.txt
        echo "::set-output name=status::success"
        
    - name: 上传.config配置文件在 github actions
      if: env.UPLOAD_CONFIG == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: .config_${{ env.SOURCE }}_${{ env.TARGET_PROFILE }}_${{ env.Firmware_Date }}
        path: config.txt
        
    - name: 同步上游compile.yml和N1.yml文件
      if: steps.compileop.outputs.status == 'success' && env.REPO_TOKEN
      run: |
        cd $GITHUB_WORKSPACE
        git clone -b main https://github.com/czkds/openwrt.git shangyouck
        git clone -b main https://github.com/${{github.repository}}.git repo
        echo "CRON2=$(grep -A 1 'schedule:' $GITHUB_WORKSPACE/.github/workflows/${{env.BILDYML}} |awk 'NR==2' |sed 's/^[ ]*//g' |sed s/^#// |sed 's/^[ ]*//g' |cut -d "#" -f1 |sed 's/\//\\&/g' |sed 's/\*/\\&/g')" >> $GITHUB_ENV
        echo "CRON1=$(grep -A 1 'schedule:' shangyouck/.github/workflows/N1.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed s/^#// |sed 's/^[ ]*//g' |sed 's/\//\\&/g' |sed 's/\*/\\&/g')" >> $GITHUB_ENV
        if [[ `grep 'cron:' $GITHUB_WORKSPACE/.github/workflows/${{env.BILDYML}} |sed 's/^[ ]*//g' |grep '^-\ cron'` ]]; then
          sed -i 's/^#\(.*schedule:\)/\1/' shangyouck/.github/workflows/N1.yml
          sed -i 's/^#\(.*- cron:\)/\1/' shangyouck/.github/workflows/N1.yml
        fi
        echo "TARGET1=$(grep 'target: \[' shangyouck/.github/workflows/N1.yml |sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/')" >> $GITHUB_ENV
        echo "TARGET2=$(grep 'target: \[' $GITHUB_WORKSPACE/.github/workflows/${{env.BILDYML}}  |sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/')" >> $GITHUB_ENV
        echo "QIDONG1=$(grep -A 1 'paths:' shangyouck/.github/workflows/compile.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed 's/\//\\&/g')" >> $GITHUB_ENV
        echo "QIDONG2=- 'build\/${{matrix.target}}\/start-up\/start'" >> $GITHUB_ENV
        echo "TARGE1=$(grep 'target: \[' shangyouck/.github/workflows/compile.yml |sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/')" >> $GITHUB_ENV
        echo "TARGE2=target: \\[${{matrix.target}}\\]" >> $GITHUB_ENV
        echo "BEIYONG1=$(grep -A 2 'target:' shangyouck/.github/workflows/N1.yml |grep '\# \[.*\]' | sed -r 's/\# \[(.*)\]/\1/' |sed 's/^[ ]*//g')" >> $GITHUB_ENV
        echo "BEIYONG2=$(grep -A 2 'target:' $GITHUB_WORKSPACE/.github/workflows/${{env.BILDYML}} |grep '\# \[.*\]' | sed -r 's/\# \[(.*)\]/\1/' |sed 's/^[ ]*//g')" >> $GITHUB_ENV
        echo "QDMAME1=$(sed -n '1,50p' shangyouck/.github/workflows/N1.yml |grep '^name' |sed 's/\//\\&/g' |sed 's/\*/\\&/g')" >> $GITHUB_ENV
        echo "QDMAME2=$(sed -n '1,50p' $GITHUB_WORKSPACE/.github/workflows/${{env.BILDYML}} |grep '^name' |sed 's/\//\\&/g' |sed 's/\*/\\&/g')" >> $GITHUB_ENV
        echo "GONGGAO1=编译${{env.SOURCE}}-${{env.TARGET_PROFILE}}固件" >> $GITHUB_ENV
    
    - name: 触发compile.yml启动"${{matrix.target}}"编译
      if: steps.compileop.outputs.status == 'success' && env.REPO_TOKEN
      run: |
        cd $GITHUB_WORKSPACE
        sed -i "s/BILDYML: N1.yml/BILDYML: ${{env.BILDYML}}/g" shangyouck/.github/workflows/N1.yml
        if [[ -n "${{env.QDMAME1}}" ]] && [[ -n "${{env.QDMAME2}}" ]]; then
          sed -i "s/${{env.QDMAME1}}/${{env.QDMAME2}}/g" shangyouck/.github/workflows/N1.yml
        fi
        if [[ -n "${{env.BEIYONG1}}" ]] && [[ -n "${{env.BEIYONG2}}" ]]; then
          sed -i "s/${{env.BEIYONG1}}/${{env.BEIYONG2}}/g" shangyouck/.github/workflows/N1.yml
        fi
        if [[ -n "${{env.CRON1}}" ]] && [[ -n "${{env.CRON2}}" ]]; then
          sed -i "s/${{env.CRON1}}/${{env.CRON2}}/g" shangyouck/.github/workflows/N1.yml
        fi
        if [[ -n "${{env.TARGET1}}" ]] && [[ -n "${{env.TARGET2}}" ]]; then
          sed -i "s/${{env.TARGET1}}/${{env.TARGET2}}/g" shangyouck/.github/workflows/N1.yml
        fi
        if [[ -n "${{env.TARGE1}}" ]] && [[ -n "${{env.TARGE2}}" ]]; then
          sed -i "s/${{env.TARGE1}}/${{env.TARGE2}}/g" shangyouck/.github/workflows/compile.yml
        fi
        if [[ -n "${{env.QIDONG1}}" ]] && [[ -n "${{env.QIDONG2}}" ]]; then
          sed -i "s/${{env.QIDONG1}}/${{env.QIDONG2}}/g" shangyouck/.github/workflows/compile.yml
        fi
        cp -Rf $GITHUB_WORKSPACE/shangyouck/README.md $GITHUB_WORKSPACE/repo
        cd repo
        if [[ -n "$(ls -A "build/${{matrix.target}}/${CONFIG_FILE}" 2>/dev/null)" ]]; then
          git rm -rf build/${{matrix.target}}/${CONFIG_FILE}
        fi
        cp -Rf $GITHUB_WORKSPACE/${CONFIG_FILE} build/${{matrix.target}}/${CONFIG_FILE}
        if [[ -n "$(ls -A "$GITHUB_WORKSPACE/repo/.github/workflows/compile.yml" 2>/dev/null)" ]]; then
          git rm -rf $GITHUB_WORKSPACE/repo/.github/workflows/compile.yml
        fi
        cp -Rf $GITHUB_WORKSPACE/shangyouck/.github/workflows/compile.yml .github/workflows/compile.yml
        if [[ -n "$(ls -A "$GITHUB_WORKSPACE/repo/.github/workflows/synchronization.yml" 2>/dev/null)" ]]; then
          git rm -rf $GITHUB_WORKSPACE/repo/.github/workflows/synchronization.yml
        fi
        cp -Rf $GITHUB_WORKSPACE/shangyouck/.github/workflows/synchronization.yml .github/workflows/synchronization.yml
        git rm -rf $GITHUB_WORKSPACE/repo/.github/workflows/${{env.BILDYML}}
        cp -Rf $GITHUB_WORKSPACE/shangyouck/.github/workflows/N1.yml .github/workflows/${{env.BILDYML}}
        mkdir -p build/${{matrix.target}}/start-up
        echo "${{env.SOURCE}}于$(date +%Y年%m月%d号%H时%M分%S秒)自动触发编译${{env.TARGET_PROFILE}}固件" > build/${{matrix.target}}/start-up/start
        git add .
        git commit -m "${{env.GONGGAO1}}"
        git push --force "https://${{ secrets.REPO_TOKEN }}@github.com/${{github.repository}}" HEAD:main
        
    - name: 编译信息
      continue-on-error: true
      if: env.BY_INFORMATION == 'true'
      run: |
        cd openwrt
        source $BUILD_PATH/upgrade.sh && GET_TARGET_INFO
        source $BUILD_PATH/common.sh && Diy_xinxi
    

